### 0.18.8 ###

Added temp folder to the configuration for temp pcaps which are
created during feature extraction.

core:
  Converter.py:
    added pcap_id (first field of pcap name) to the feature vector for
    consistent ids.

containers:
  Session.py:
    saving first packet from pcap.

    modified fSSL_num_extensions() to use the temp directory.

    added time_plus_ip_port_tuple()

Added add_labels_to_csv.py in case it's useful.

### 0.18.7 ###

Note:
  Checked new changes on session and time segment raw data.

Mean on a single value now returns the value.
Mean on no values returns 0.

std and var on less than 2 values return 0.

It's now possible for a time segment or a flow to have 0 values
if no packets are present.

If a session has no packets then the min / max functions will return nan values.

### 0.18.6 ###

Note:
  not sure if the new function
  gen_sni_csv_w_dup_and_filename()
  works properly

Rename:
  parse_folder_name() to parse_pcap_name()

New:
  get_pcap_id()
  given a pcap path and the id_table file
  the function will return the matching id

### 0.18.5 ###

Added time segments.
Updated README.md and conf.hcl

New files:

containers:
    ContainerWrapper.py:
      Simple wrapper for sample type.

    TimeSegment.py:
      Time segment pcap container and feature methods.

generate_pcap_folders.py

Modified:

core:
  Converter.py:
    Constructor:
      now using conf.get_data_folders()

    pcap_to_feature_vector():
      adjusted to use pcap_id, ContainerWrapper, gen_label

    write_to_csv():
      dropping na rows with dropna()

    main.py:
      Changed output seperator to comma

utils:
  general.py:
    Adjustments for time segment samples:
    gen_label()
    get_mobile_action_label()
    get_twitter_action_label()
    gen_data_folders()


run.py:
  Now displays total run time

### 0.18.4 ###

Created output folder.

Updated README.md

### 0.18.3 ###

Merging code:

learn.py:
  create_data_libSVM():
    dumping to svmlight file format.
    Need to decide for a way to name the label column.


  prepare_libSVM_train_test():
    Changed function declaration to include 'sinds'.
    Choosing a subset of the input by sinds.

  prepare_libSVM_current():
    Added

  run_easy_py()
    Added

  choose_feature()
    Added

core:
  Converter:
    pcap_to_feature_vector():
      Added optional if statement to remove pcap files containing NaN features.
      The if is currently commented out.

temp.py:
  gen_folder_filename_couples():
    Added

  fix_folders():
    Added

### 0.18.2 ###
containers:
  Session:
    fcipher_suites_no_bins()

    fSSLv_no_bins()

    mean_fttl_no_bins()


### 0.18.1 ###
Updated labels generator and default values for Session features


### 0.18 ###
Added parallel map using pathos

conf:
  conf:
    fixed - get_session_data() to correctly iterate over the csv

containers:
  Session:
    Generating client hello and syn packet once

    fSSL_num_extensions():
      Generating (and erasing) a temp pcap with the first 10 packets to catch the client hello packet in scapy

core:
  Converter:
    Using pathos.multiprocessing.ProcessingPool.map
    Using conf.get_session_data() to get pre-generated session data folders

data:
  session_folders.csv:
    Containes the session data folder paths

output:
  A folder for output - samples.csv etc...

tests:
  test_our_features:
    Merged all Session test files to one

utils:
  general:
    write_data_folders_to_file():
      Uses gen_data_folders() to generate the relevant folder paths and writes to file

conf.hcl:
  Added session_folders_filename

dependencies:
  Updated to include scapy, scapy.ssl_tls, pathos

generate_session_pcap_folders:
  A simple script

pathos_install:
  Installation instructions for pathos


### 0.17.3 ###
containers:
  Session:
    fSSLv():
       Added check if "client_hello_pkt" is empty

    fcipher_suites():
      Added check if "client_hello_pkt" is empty

### 0.17.2 ###
containers:
  Session:
    fSSLv():
      Changed "hist = np.histogram(np.array(ssl_version)..."
      to  "hist = np.histogram(np.array(int(ssl_version,0)) ..."

    SSL_num_compression_methods(), fSSL_session_id_len() :
      Added to this couple of function this if "if not(df.empty):" to check if df is empty

    conf:
      local changes
    tests:
      test_session2:
        local changes
      test_utils_general:
        local changes

### 0.17.1 ###
leran.py:
  Change "df = df.drop('label',1)" to "df = df.drop(str(num_columns-1),1)"

### 0.17 ###
New features: "fSSL_session_id_len", "fSSL_num_extensions", "fSSL_num_compression_methods", "SYN_tcp_scale", "SYN_MSS", "SYN_tcp_winsize"

containers:
  Session:
    get_SYN + the 6 new features

tests:
  test_session2:
    Tests for the new features

utils:
  general:
    """ Show duplicates in an array """
    def show_dups(array):

  hcl_helpers:
    removed parse_conf

conf.hcl:
  Added new features, removed duplicates


### 0.16 ###
New feature: Client hello cipher suites count array (bins) [0-13, 13-17, 17-24]

containers:
  Session:
    get_client_hello():
      Get the client hello packet from flow up

    fSSLv():
      Now sues np.histogram

    fcipher_suites():
      Feature implementation

tests:
  test_session2:
    Added test for fcipher_suites



### 0.15 ###
New feature: Client hello ssl version in array representation [sslv3, tls1, tls11, tls12]

conf:
  conf:
    new globals for ssl versions

containers:
  Session:
    SSLv_array():
      Generate ssl version array

    fSSLv():
      Read the ssl version from the client hello pkt and return the version array

tests:
  test_session2:
    test fSSLv

conf.hcl:
  Added some fields



### 0.14.3.5 ###
New feature: Num of keep alive messages

conf:
  conf:
    Globals

    space_to_underscore()

containers:
  Flow:
    Peak features:
      Fix - diff operation has to happen after peek representative packets have been filtered

    num_keep_alive():
      returns the number of keep alive packets

  Session:
    num_keep_alive():
      Notice - keep_alive != keep_alive_ack

core:
    Using conf api

tests:
  test_session2:
    Added tests for most of the features

conf.hcl:
  Added space to underscore
  Added globals

run:
  not passing parameters - using api internally

### 0.14.3.4 ###
New features: packet size histogram, peak features

containers:
  Flow:
    Peak features

  Session:
    Forward peak features
    Backward peak features
    Packet size histogram

tests:
  TestSession1:
    test_size_histogram()




### 0.14.3.3 ###
conf:
  conf.py is an api for hcl config

core:
  Conveter:
    __init__():
      Added 'sni_csv' parameter
      and self.sni_df class field.

    pcap_to_feature_vector():
      Moved label generation logic to this function
      since each sample needs its own label.

  main:
    work():
      Added sni_csv parameter

utils:
  general:
    gen_sni_csv():
      Change this function to call in each iteration to "gen_sni"

    Added gen_sni():
      Generate all SNI from specific pcap file

    Added gen_app_name_by_sni():
      Get sni_df and return app_name

    Added read_sni_csv():
      Read sni csv and return sni data frame


  hcl_helpers:
    parse_conf():
      Added sni_csv_path

  read_pcap:
    read_pcap():
      Added data type (dtype) parameter
run:
  Adjusted parameters to config file.
  fields_list, sni_csv

### 0.14.3.2 ###
core:
  Converter:
    __init__():
      Added fields_list parameter. Saving as class member.

    pcap_to_feature_vector():
      Calling Session.from_filename(pcap_path, fields=self.fields) with the new fields class member.

  main:
    work():
      Added fields_list parameter which is sent to the Converter __init__

utils:
  hcl_helpers:
    parse_conf():
      Added output_filename parsing

conf.hcl:
  Added the output file name property

run:
  Renamed the file from ui.py.
  Working with the configuration file instead of the cmd input parameters.

### 0.14.3.1 ###
10.2.16 - JonM

utils:
  general:
    gen_sni_csv():
      Write all sni values from the data to csv

    gen_label_triple():
      given os, browser, application output a label number

    parse_folder_name():
      return os, browser based on the folder name

hcl_helpers:
    parse_conf():
      Generate fields, features lists and data directory from the conf.hcl file

containers:
  Flow:
    get_session_df():
      pd.concat([FlowUp_df, FlowDown_df], axis=0)
      Concatenate flow up + down dataframes.
      i.e. stack them on top of each other

    mean_packet_size():
      Using get_session_df instead of keeping a redundant copy of the session dataframe

    sizevar():
      Same as mean_packet_size

    max_packet_size():
      Same as mean_packet_size

    min_packet_size():
      Same as mean_packet_size

    __len__():
      Using flow up + down instead of self.session

tests:
  test_session1:
    Added:
      test_min_packet_size()

      test_max_packet_size()

generate_sni_list:
  Iterate over all pcap files in a given directory and generate an sni list in a csv file.

conf.hcl:
  The configuration file.


### Reset the code state to 0.14.3 ###

### 0.14.3 ###
core:
  main:
    work():
      added 'mean_fttl' to the default "feature_list"

Added accuracy_from_file- input: 2 file names, output: accuracy_score


### 0.14.2 ###
Fixed a bug with the mean_fttl feature.
The case when the upstream flows' function 'get_mean_ttl'
returned  NaN wasn't taken into account.
mean_fttl now Returns [0,0] for a session with such an upstream flow.

containers:
  Session:
    mean_fttl():
      Added the 'else' condition for sessions where the upstream ttl
      is NaN, returning [0,0].

core:
  main.py:
    work():
      Rename_space_underscore=True as default.

      Removed the column names parameter.

  converter.py:
    write_to_csv - Removed column names parameter

ui.py:
  An easy wrapper which calls work() from main.py

TODO.txt:
  Updated




### 0.14.1 ###
Added a new feature to Session

containers:
  Flow.py:
    get_mean_ttl():
      The mean value of all packet ttl values in the flow.

  Session.py:
    mean_fttl():
      Discretized upstream TTL values.
      Assuming Two bins: 0-64, 65-128

tests:
  test_our_features.py:
    Did some adjustments.
    Using numpy array equality testing.


### 0.14 ###
containers:
  Session.py:
    Added documentation for a new feature - client_hello_ttl

tests:
  test_our_features.py:
    Implemented a couple of tests for the new feature

### 0.13 ###
workflow:
  Added # Add a feature to the code
  Added # Write a test case

learn.py:
  create_data_libSVM():
    Changed the input parameters: (source, output_filename, isDataFrame=False).
    Added an if clause for `isDataFrame` to allow the source to be either a filename or a DataFrame.

  prepare_libSVM_train_test():
    Receives an input csv file name.
    Writes out two csv files.
    Train and Test.

  main():
    Receiving input and output filenames from cmd-line.

### 0.12 ###
utils:
  general:
    parse_folder_name:
      Added label for OSX and for Unknown data
    gen_label:
      Added label for Unknown data


### 0.11 ###
containers:
  PacketContainer:
    Delete sizemean function

core:
  main:
    work():
      Change  "sizemean" to "mean_packet_size" in "feature_list"

dependencies:
  Added "all filenames must be in English"

Added learn.py:
    - For run sklearn SVC
    - For fit data to libSVM

### 0.10.1 ###
containers:
  PacketContainer.py:
    Changed sizemean() to mean_packet_size()

core:
  main.py:
    work():
      changed sizemean feature to 'mean_packet_size'

dependencies:
  Updated

splitcap_install.txt:
  Instructions to install splitCap on Linux



### 0.10 ###
core:
  main:
    work():
    Converts all relevant pcap files in the given ROOT_DIRECTORY with the given feature_list and save the results to the output_filename

    start_here():
    UI - For end users who dont want to write code


### 0.09 ###
core:
  Converter:
    __init__():
      Added a Pool class field

    sessions_to_samples():
      Added if clause to check if a given folder has at least one pcap file

    write_to_csv():
      Added this function.
      Writes the processed feature mat to a csv file.

tests:
  test_utils_general:
    test_is_pcap_session_True():
      Added this test

    test_is_pcap_session_False():
      Added this test

utils:
  general:
    gen_data_folders():
      Currently assuming that if a single pcap file in a directory is a session
      pcap, all other pcap files in the directory are also session pcaps.
      Therefor the if clause checks if any of the pcap files in a given
      directory is a session pcap. If true the directory is added to the list
      of relevant directories.

    gen_pcap_filenames():
      Added check - whether filename ends with .pcap extension.

    is_pcap_session():
      Return True if the given pcap is a session

    space_to_underscore():
      Replace space with underscore for all folder and file names - for the input filename


### 0.08 ###
core:
  Converter:
    sessions_to_samples():
      Naively generates label by parsing the folder name and sends it to pcap_to_feature_vector().

data/L_cyber_chrome_09-17__11_38_11:
  label_data.hcl:
    Follows the following format:
    label_data {
    	os = "Linux"
    	browser = "Chrome"
    	application = "Twitter"
    	service = "Tweet"
    }

tests:
  Adjusted tcp.len to frame.len

utils:
  general:
    gen_label():
      returns a label for a given os.
      Should eventually return a label for any os, browser, application, service combination.

    parse_folder_name():
      Assumes the following format:
      L_cyber_chrome_09-17__11_38_11
      Currently returns os by the first letter in the folder name.

  hcl_helpers:
    read_hcl():
      Returns a JSON representing the content of the hcl file.

    read_label_data():
      Assumes label_data follows a specific format.
      Returns os, browser, application, service.


### 0.07 ###
containers:
  Flow:
    Added the following features:
      """ Std of packet time deltas """
      """ Size of all packets in bytes """
      """ Min packet size """
      """ Max packet size """
      """ Std packet size """
      """ Mean packet size """
      """ Min time delta """
      """ Max time delta """
      """ time delta mean """

  Session:
    Added the following features:
      """ Size of all packets in bytes """
      """ Max packet size """
      """ Min packet size """
      """ # Packets in forward direction (fpackets) """
      """ # Packets in backward direction (bpackets) """
      """ # Bytes in forward direction (fbytes) """
      """ # Bytes in backward direction (bbytes) """
      """ Min forward inter-arrival time (min_fiat) """
      """ Min backward inter-arrival time (min_biat) """
      """ Max forward inter-arrival time (max_fiat) """
      """ Max backward inter-arrival time (max_biat) """
      """ Standard deviation of forward inter- arrival times (std_fiat) """
      """ Standard deviation of backward inter- arrival times (std_biat) """
      """ Mean forward inter-arrival time (mean_fiat) """
      """ Mean backward inter-arrival time (mean_biat) """
      """ Min forward packet length (min_fpkt) """
      """ Min backward packet length (min_bpkt) """
      """ Max forward packet length (max_fpkt) """
      """ Max backward packet length (max_bpkt) """
      """ Std deviation of forward packet length (std_fpkt) """
      """ Std deviation of backward packet length (std_bpkt) """
      """ Mean forward packet length (mean_fpkt)	"""
      """ Mean backward packet length (mean_bpkt) """


### 0.06 ###
containers.Session:
  from_filename() class method now uses read_pcap instread of gen_flows_up_down.
  Effectively using a custom function to read data from tshark output into a DataFrame instead of steelscript-wireshark.

tests:
  test_session1:
    Did some adjustments to the test suite to fit the new Session class structure.

  test_session2:
    A new test which reads in an entire pcap file.
    Currently checks that the amout of read packets fits the actual amount of packets in the pcap file.

utils.read_pcap:
  Implemented read_pcap() which simply calls tshark in the background and sends its output to pandas.read_table.
  Apparently simpler and more reliable than steelscript-wireshark.


### 0.05 ###
utils.read_pcap:
  gen_flows_up_down():
    Now returns up_flow, down_flow (in this order) according to tcp.dstport 443


### 0.04 ###
utils.general:
  + cleanup_pyc():
    .pyc file cleanup function (root/cleanup_pyc_files.py calls it).

  + gen_data_folders():
    walks the root data folder and returns all relevant folder names containing pcap files.

  + gen_pcap_filenames():
    from a given folder

README.md:
  + data folder structure explanation

core:
  Converter.py:
    Merged sessions_to_samples() and pcap_to_feature_vector into converter
    pcap_to_feature_vector() now reads the feature_methods list from a class field

changelog.txt:
  Renamed changes.txt to changelog.txt


### 0.03 ###
Added a TODO list

sessions_to_samples:
  Added this module to map a folder of pcap files to a list of sample feature vectors


### 0.02 ###
pcap_to_feature_vector.py:
  pcap_to_feature_vector:
      Dynamically call methods

containers:
  Session:
    from_filename:
        returning only session DataFrame - matching the constructor
    Added packet_count()
